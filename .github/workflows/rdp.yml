name: CI

on: workflow_dispatch

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 9999

    steps:
    - name: Download Ngrok
      run: |
        Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
        Expand-Archive ngrok.zip -DestinationPath C:\Windows\System32
    
    - name: Enable TS and Configure Firewall
      run: |
        # Enable Terminal Services
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 0
        
        # Enable RDP Firewall rule
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        
        # Ensure RDP service is running
        Restart-Service -Name TermService -Force
        
        # Add firewall rules for Ngrok
        New-NetFirewallRule -DisplayName 'Ngrok-In' -Direction Inbound -Action Allow -Protocol TCP -LocalPort 4444,3389
        New-NetFirewallRule -DisplayName 'Ngrok-Out' -Direction Outbound -Action Allow -Protocol TCP -LocalPort 4444,3389
    
    - name: Create Tunnel
      run: |
        cd C:\Windows\System32
        
        # Kill any existing Ngrok processes
        Get-Process ngrok -ErrorAction SilentlyContinue | Stop-Process -Force
        
        # Create Ngrok config
        @"
        version: "2"
        authtoken: 2sBmIF4uQLdVKz6kgB17LAgFLNh_2k5RJtbxpYH5uyboZZw9f
        region: us
        console_ui: false
        web_addr: 127.0.0.1:4444
        log_level: debug
        log_format: json
        tunnels:
          rdp:
            proto: tcp
            addr: 3389
            bind_tls: true
        "@ | Out-File ngrok.yml -Encoding ASCII
        
        # Start Ngrok with the new config
        Write-Host "Starting Ngrok..."
        Start-Process ngrok.exe -ArgumentList "start --all --config ngrok.yml" -NoNewWindow
        
        # Wait for Ngrok to initialize
        Write-Host "Waiting for Ngrok to initialize..."
        Start-Sleep -Seconds 10
        
        # Verify Ngrok is running
        $ngrokProcess = Get-Process ngrok -ErrorAction SilentlyContinue
        if ($ngrokProcess) {
            Write-Host "Ngrok is running with PID: $($ngrokProcess.Id)"
        } else {
            Write-Host "Failed to start Ngrok"
            exit 1
        }
    
    - name: Connect to RDP
      run: |
        # Configure RDP user
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "Runner@123" -Force)
        
        function Get-NgrokUrl {
            try {
                $tunnels = Invoke-RestMethod -Uri "http://127.0.0.1:4444/api/tunnels"
                foreach ($tunnel in $tunnels.tunnels) {
                    if ($tunnel.proto -eq 'tcp') {
                        return $tunnel.public_url -replace "tcp://", ""
                    }
                }
            }
            catch {
                Write-Host "Error getting tunnel URL: $_"
                return $null
            }
        }
        
        # Get connection details
        $maxAttempts = 5
        $attempt = 0
        $connected = $false
        
        do {
            $attempt++
            Write-Host "`nAttempt $attempt of $maxAttempts to get connection details..."
            
            # Verify Ngrok is running
            $ngrokProcess = Get-Process ngrok -ErrorAction SilentlyContinue
            if (-not $ngrokProcess) {
                Write-Host "Ngrok not running, restarting..."
                Start-Process ngrok.exe -ArgumentList "start --all --config ngrok.yml" -NoNewWindow
                Start-Sleep -Seconds 10
            }
            
            $url = Get-NgrokUrl
            if ($url) {
                Write-Host "`nRDP Connection Details:"
                Write-Host "------------------------"
                Write-Host "Host: $url"
                Write-Host "Username: runneradmin"
                Write-Host "Password: Runner@123"
                Write-Host "------------------------"
                $connected = $true
                break
            }
            
            Write-Host "Waiting before next attempt..."
            Start-Sleep -Seconds 5
            
        } while ($attempt -lt $maxAttempts -and -not $connected)
        
        if (-not $connected) {
            Write-Host "Failed to establish connection after $maxAttempts attempts"
            exit 1
        }
    
    - name: Keep Alive
      run: |
        $minutes = 0
        do {
            if ($minutes % 10 -eq 0) {
                $url = Get-NgrokUrl
                if ($url) {
                    Write-Host "`nRDP is still active!"
                    Write-Host "------------------------"
                    Write-Host "Host: $url"
                    Write-Host "Username: runneradmin"
                    Write-Host "Password: Runner@123"
                    Write-Host "------------------------"
                } else {
                    Write-Host "Warning: Could not verify connection status"
                }
            }
            Start-Sleep -Seconds 60
            $minutes++
            Write-Host "Session has been active for $minutes minute(s)"
        } while ($true)
