name: CI

on: workflow_dispatch

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 9999

    steps:
    - name: Download Ngrok
      run: |
        Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
        Expand-Archive ngrok.zip -DestinationPath C:\Windows\System32
    
    - name: Enable TS
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 0
        
        # Ensure RDP port is open
        New-NetFirewallRule -DisplayName 'RDP-Port' -Direction Inbound -Protocol TCP -LocalPort 3389 -Action Allow
        
        # Restart Terminal Services for changes to take effect
        Restart-Service -Name TermService -Force
        Start-Sleep -Seconds 5
    
    - name: Create Tunnel
      run: |
        # Start Ngrok in background
        cd C:\Windows\System32
        Start-Process ngrok.exe -ArgumentList "tcp 3389" -WindowStyle Hidden
        Start-Sleep -Seconds 5
        
        # Configure Ngrok
        Write-Host "Configuring Ngrok..."
        ./ngrok.exe authtoken "${{ secrets.NGROK_AUTH_TOKEN }}"
        
        # Wait for Ngrok to initialize
        Write-Host "Waiting for Ngrok to initialize..."
        Start-Sleep -Seconds 10
    
    - name: Connect to RDP
      run: |
        # Configure RDP user
        $Password = "Runner@123"
        $SecurePassword = ConvertTo-SecureString $Password -AsPlainText -Force
        Set-LocalUser -Name "runneradmin" -Password $SecurePassword
        
        # Wait for Ngrok tunnel
        Write-Host "Waiting for Ngrok tunnel..."
        $retryCount = 0
        $maxRetries = 10
        $success = $false
        
        do {
            try {
                $tunnels = (Invoke-WebRequest -Uri http://localhost:4040/api/tunnels -UseBasicParsing).Content | ConvertFrom-Json
                $rdpTunnel = $tunnels.tunnels | Where-Object { $_.proto -eq 'tcp' } | Select-Object -First 1
                
                if ($rdpTunnel) {
                    $rdpAddress = $rdpTunnel.public_url -replace "tcp://", ""
                    Write-Host "RDP Connection Details:"
                    Write-Host "------------------------"
                    Write-Host "Host: $rdpAddress"
                    Write-Host "Username: runneradmin"
                    Write-Host "Password: $Password"
                    Write-Host "------------------------"
                    $success = $true
                    break
                }
            }
            catch {
                $retryCount++
                Write-Host "Attempt $retryCount of $maxRetries failed. Retrying in 5 seconds..."
                Start-Sleep -Seconds 5
            }
        } while ($retryCount -lt $maxRetries -and -not $success)
        
        if (-not $success) {
            throw "Failed to establish RDP connection after $maxRetries attempts"
        }
    
    - name: Keep Alive
      run: |
        $i = 0
        do {
            if ($i % 30 -eq 0) {
                try {
                    $tunnels = (Invoke-WebRequest -Uri http://localhost:4040/api/tunnels -UseBasicParsing).Content | ConvertFrom-Json
                    $rdpTunnel = $tunnels.tunnels | Where-Object { $_.proto -eq 'tcp' } | Select-Object -First 1
                    if ($rdpTunnel) {
                        $rdpAddress = $rdpTunnel.public_url -replace "tcp://", ""
                        Write-Host "`nRDP is still active! Connect using:"
                        Write-Host "Host: $rdpAddress"
                        Write-Host "Username: runneradmin"
                        Write-Host "Password: Runner@123"
                    }
                }
                catch {
                    Write-Host "Warning: Could not verify tunnel status"
                }
            }
            Start-Sleep -Seconds 60
            $i++
            Write-Host "Session has been active for $i minute(s)"
        } while ($true)
