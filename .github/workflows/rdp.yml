name: CI

on: workflow_dispatch

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 9999

    steps:
    - name: Download Ngrok
      run: |
        Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
        Expand-Archive ngrok.zip -DestinationPath C:\Windows\System32
    
    - name: Enable TS
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 0
        
        # Ensure RDP port is open
        New-NetFirewallRule -DisplayName 'RDP-Port' -Direction Inbound -Protocol TCP -LocalPort 3389 -Action Allow
        
        # Restart Terminal Services for changes to take effect
        Restart-Service -Name TermService -Force
    
    - name: Create Tunnel
      run: |
        cd C:\Windows\System32
        ./ngrok.exe authtoken "${{ secrets.NGROK_AUTH_TOKEN }}"
        Start-Process ngrok.exe -ArgumentList "tcp 3389"
        Start-Sleep -Seconds 5
    
    - name: Connect to RDP
      run: |
        # Set up RDP user
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "Runner@123" -Force)
        Write-Host "RDP user credentials set."
        
        # Wait for Ngrok to be ready
        $maxAttempts = 10
        $attempt = 0
        $success = $false
        
        do {
            $attempt++
            Write-Host "Checking Ngrok connection (Attempt $attempt of $maxAttempts)..."
            
            try {
                # Try to get tunnel info directly without checking TCP connection
                $tunnelInfo = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -UseBasicParsing
                $tunnel = $tunnelInfo.tunnels | Where-Object { $_.proto -eq 'tcp' } | Select-Object -First 1
                
                if ($tunnel) {
                    $address = $tunnel.public_url -replace "tcp://", ""
                    Write-Host "RDP Connection Details:"
                    Write-Host "------------------------"
                    Write-Host "Host: $address"
                    Write-Host "Username: runneradmin"
                    Write-Host "Password: Runner@123"
                    Write-Host "------------------------"
                    $success = $true
                    break
                }
            }
            catch {
                Write-Host "Attempt $attempt failed: $_"
                if ($attempt -lt $maxAttempts) {
                    Write-Host "Retrying in 5 seconds..."
                    Start-Sleep -Seconds 5
                }
            }
        } while ($attempt -lt $maxAttempts -and -not $success)
        
        if (-not $success) {
            Write-Host "Failed to establish tunnel after $maxAttempts attempts"
            exit 1
        }
    
    - name: Keep Alive
      run: |
        $i = 0
        do {
            if ($i % 10 -eq 0) {
                try {
                    $tunnelInfo = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -UseBasicParsing
                    $tunnel = $tunnelInfo.tunnels | Where-Object { $_.proto -eq 'tcp' } | Select-Object -First 1
                    if ($tunnel) {
                        $address = $tunnel.public_url -replace "tcp://", ""
                        Write-Host "`nRDP is ready! Connect using:"
                        Write-Host "Host: $address"
                        Write-Host "Username: runneradmin"
                        Write-Host "Password: Runner@123"
                    }
                }
                catch {
                    Write-Host "Warning: Could not get tunnel info"
                }
            }
            Start-Sleep -Seconds 60
            $i++
            Write-Host "Session has been active for $i minute(s)"
        } while ($true)
