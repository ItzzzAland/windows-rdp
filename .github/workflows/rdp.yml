name: CI

on: workflow_dispatch

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 9999

    steps:
    - name: Download Ngrok
      run: |
        Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
        Expand-Archive ngrok.zip -DestinationPath C:\Windows\System32
    
    - name: Enable TS
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 0
        
        # Ensure RDP port is open
        New-NetFirewallRule -DisplayName 'RDP-Port' -Direction Inbound -Protocol TCP -LocalPort 3389 -Action Allow
        
        # Restart Terminal Services for changes to take effect
        Restart-Service -Name TermService -Force
    
    - name: Create Tunnel
      run: |
        cd C:\Windows\System32
        ./ngrok.exe authtoken "${{ secrets.NGROK_AUTH_TOKEN }}"
        Start-Process ngrok.exe -ArgumentList "tcp --region us 3389"
        Start-Sleep -Seconds 10
    
    - name: Connect to RDP
      run: |
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "Runner@123" -Force)
        Start-Sleep -Seconds 1
        
        function Get-NgrokUrl {
            try {
                $api = Invoke-RestMethod -Uri http://127.0.0.1:4444/api/tunnels
                $url = $api.tunnels[0].public_url
                return $url -replace "tcp://", ""
            } catch {
                return $null
            }
        }
        
        Write-Host "Waiting for Ngrok tunnel..."
        $maxRetries = 10
        $retryCount = 0
        $url = $null
        
        do {
            $retryCount++
            $url = Get-NgrokUrl
            
            if ($url) {
                Write-Host "RDP Connection Details:"
                Write-Host "------------------------"
                Write-Host "Host: $url"
                Write-Host "Username: runneradmin"
                Write-Host "Password: Runner@123"
                Write-Host "------------------------"
                break
            } else {
                if ($retryCount -lt $maxRetries) {
                    Write-Host "Attempt $retryCount of $maxRetries. Waiting for Ngrok..."
                    Start-Sleep -Seconds 5
                }
            }
        } while ($retryCount -lt $maxRetries)
        
        if (-not $url) {
            Write-Host "Failed to get Ngrok URL after $maxRetries attempts"
            exit 1
        }
    
    - name: Keep Alive
      run: |
        function Show-ConnectionInfo {
            $url = Get-NgrokUrl
            if ($url) {
                Write-Host "`nRDP is ready! Connect using:"
                Write-Host "Host: $url"
                Write-Host "Username: runneradmin"
                Write-Host "Password: Runner@123"
                return $true
            }
            return $false
        }
        
        $i = 0
        do {
            if ($i % 10 -eq 0) {
                if (-not (Show-ConnectionInfo)) {
                    Write-Host "Warning: Could not get connection details"
                }
            }
            Start-Sleep -Seconds 60
            $i++
            Write-Host "Session has been active for $i minute(s)"
        } while ($true)
