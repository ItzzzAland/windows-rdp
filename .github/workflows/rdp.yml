name: CI

on: workflow_dispatch

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 9999

    steps:
    - name: Download Ngrok
      run: |
        Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
        Expand-Archive ngrok.zip -DestinationPath C:\Windows\System32
    
    - name: Enable TS
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 0
    
    - name: Create Tunnel
      run: |
        cd C:\Windows\System32
        # Create Ngrok config file
        @"
        web_addr: 127.0.0.1:4444
        tunnels:
          rdp:
            proto: tcp
            addr: 3389
        "@ | Out-File ngrok.yml -Encoding ASCII
        
        ./ngrok.exe authtoken "${{ secrets.NGROK_AUTH_TOKEN }}"
        Start-Process ngrok.exe -ArgumentList "start --config ngrok.yml rdp" -WindowStyle Hidden
        Start-Sleep -Seconds 15
    
    - name: Connect to RDP
      run: |
        # Set RDP password
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "Runner@123" -Force)
        
        # Function to check Ngrok status
        function Get-NgrokStatus {
            try {
                # Check if Ngrok is running
                $ngrokProcess = Get-Process ngrok -ErrorAction SilentlyContinue
                if (-not $ngrokProcess) {
                    Write-Host "Ngrok is not running. Restarting..."
                    Start-Process ngrok.exe -ArgumentList "start --config ngrok.yml rdp" -WindowStyle Hidden
                    Start-Sleep -Seconds 15
                }
                
                # Get tunnel info
                $tunnels = Invoke-WebRequest -Uri http://127.0.0.1:4444/api/tunnels -UseBasicParsing | ConvertFrom-Json
                return $tunnels.tunnels[0].public_url -replace "tcp://", ""
            }
            catch {
                return $null
            }
        }
        
        # Try to get connection details
        $maxAttempts = 5
        $attempt = 0
        $connected = $false
        
        do {
            $attempt++
            Write-Host "Checking connection (Attempt $attempt of $maxAttempts)..."
            $url = Get-NgrokStatus
            
            if ($url) {
                Write-Host "RDP Connection Details:"
                Write-Host "------------------------"
                Write-Host "Host: $url"
                Write-Host "Username: runneradmin"
                Write-Host "Password: Runner@123"
                Write-Host "------------------------"
                $connected = $true
                break
            }
            else {
                Write-Host "Waiting for connection... (Attempt $attempt of $maxAttempts)"
                Start-Sleep -Seconds 10
            }
        } while ($attempt -lt $maxAttempts -and -not $connected)
        
        if (-not $connected) {
            Write-Host "Failed to establish connection after $maxAttempts attempts"
            exit 1
        }
    
    - name: Keep Alive
      run: |
        $minutes = 0
        do {
            if ($minutes % 10 -eq 0) {
                try {
                    $tunnels = Invoke-WebRequest -Uri http://127.0.0.1:4444/api/tunnels -UseBasicParsing | ConvertFrom-Json
                    $url = $tunnels.tunnels[0].public_url -replace "tcp://", ""
                    Write-Host "`nRDP is still active!"
                    Write-Host "------------------------"
                    Write-Host "Host: $url"
                    Write-Host "Username: runneradmin"
                    Write-Host "Password: Runner@123"
                    Write-Host "------------------------"
                }
                catch {
                    Write-Host "Warning: Could not verify connection status"
                }
            }
            Start-Sleep -Seconds 60
            $minutes++
            Write-Host "Session has been active for $minutes minute(s)"
        } while ($true)
